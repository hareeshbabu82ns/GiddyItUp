type Query {

  # user
  me: User!
  users: [User!]!
  user(id:ID!): User!
  login(email: String!, password: String!): UserToken!

  # child
  children: [Child!]!
  child(id:ID!): Child!

  # parent
  parents: [Parent!]!
  parent(id:ID!): Parent!

  # task
  tasks: [Task!]!
  task(id:ID!): Task!

}

type Mutation {

  # user
  # signup(name: String!, email: String!, password: String!): User!
  updateUser(id: ID!, data: UserInput!): User!
  deleteUser(id: ID!): User!

  # child
  createChild(data: ChildCreateInput!): Child!
  updateChild(id: ID!, data: ChildUpdateInput!): Child!
  deleteChild(id: ID!): Child!

  # parent
  createParent(data: ParentCreateInput!): Parent!
  updateParent(id: ID!, data: ParentUpdateInput!): Parent!
  deleteParent(id: ID!): Parent!

  # task
  createTask(data: TaskCreateInput!): Task!
  updateTask(id: ID!, data: TaskUpdateInput!): Task!
  deleteTask(id: ID!): Task!

}

type UserToken {
  user: User
  token: String
}

type User {
  id: ID!
  fullName: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input UserInput {
  firstName: String
  lastName: String
  email: String
  password: String
}

type Parent {
  id: ID!
  fullName: String!
  firstName: String!
  lastName: String!
}

input ParentCreateInput {
  firstName: String!
  lastName: String!
}
input ParentUpdateInput {
  firstName: String
  lastName: String
}


type Child {
  id: ID!
  fullName: String!
  firstName: String!
  lastName: String!
  dateOfBirth: String!
  age: Int
  points: Int
  avatar: String
}

input ChildCreateInput {
  firstName: String!
  lastName: String!
  dateOfBirth: String!
  avatar: String
  points: Int
}
input ChildUpdateInput {
  firstName: String
  lastName: String
  dateOfBirth: String
  avatar: String
  points: Int
}

type Task {
  id: ID!
  location: String
  name: String!
  description: String!
  points: Int!
}

input TaskCreateInput {
  location: String
  name: String!
  description: String
  points: Int!
}

input TaskUpdateInput {
  location: String
  name: String
  description: String
  points: Int
}

type Points {
  id: ID!
  child: Child!
  task: Task!
  points: Int!
  remarks: String
}

input PointsInput {
  childID: ID
  taskID: ID
  points: Int
  remarks: String
}